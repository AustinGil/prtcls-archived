@each $item in (color, color), (bg, background-color), (border, border-color) {
  $prefix: nth($item, 1);
  $rule: nth($item, 2);

  $classMap: map-merge(
    $classMap,
    (
      "#{$prefix}-white": (
        #{$rule}: $white,
      ),
      "#{$prefix}-black": (
        #{$rule}: $black,
      ),
      "#{$prefix}-transparent": (
        #{$rule}: transparent,
      ),
    )
  );
}

$lums: 95%, 86%, 76%, 66%, 57%, 48%, 38%, 29%, 20%;
@each $color in $colors {
  @for $i from 1 through length($lums) {
    $name: nth($color, 1);
    $h: nth($color, 2);
    $s: $saturation;
    $l: nth($lums, $i);

    @if length($color) > 2 {
      $s: nth($color, 3);
    }
    @if $name == "gray" {
      $s: 0;
    }

    $classMap: map-merge(
      $classMap,
      (
        "color-#{$name}-#{$i}": (
          color:
            hsla(
              var(--color-hue, $h),
              var(--color-saturation, $s),
              var(--color-lightness, $l),
              var(--color-alpha, 1)
            ),
        ),
        "bg-#{$name}-#{$i}": (
          background-color:
            hsla(
              var(--bg-hue, $h),
              var(--bg-saturation, $s),
              var(--bg-lightness, $l),
              var(--bg-alpha, 1)
            ),
        ),
        "border-#{$name}-#{$i}": (
          border-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-t-#{$name}-#{$i}": (
          border-top-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-b-#{$name}-#{$i}": (
          border-bottom-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-l-#{$name}-#{$i}": (
          border-left-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-r-#{$name}-#{$i}": (
          border-right-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-y-#{$name}-#{$i}": (
          border-top-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
          border-bottom-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
        "border-x-#{$name}-#{$i}": (
          border-left-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
          border-right-color:
            hsla(
              var(--border-hue, $h),
              var(--border-saturation, $s),
              var(--border-lightness, $l),
              var(--border-alpha, 1)
            ),
        ),
      )
    );

    $customProps: map-merge(
      $customProps,
      (
        "#{$name}-#{$i}":
          hsla(
            var(--color-hue, $h),
            var(--color-saturation, $s),
            var(--color-lightness, $l),
            var(--color-alpha, 1)
          ),
      )
    );
  }
}
